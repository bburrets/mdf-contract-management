name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mdf_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type check
      run: npm run type-check

    - name: Run unit tests
      run: npm run test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: mdf_system_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

    - name: Build application
      run: npm run build
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: mdf_system_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
        DB_HOST: ${{ secrets.STAGING_DB_HOST }}
        DB_PORT: ${{ secrets.STAGING_DB_PORT }}
        DB_NAME: ${{ secrets.STAGING_DB_NAME }}
        DB_USER: ${{ secrets.STAGING_DB_USER }}
        DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}

    # Add your staging deployment steps here
    # This could be deploying to Vercel, AWS, or your preferred hosting platform

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.PROD_NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.PROD_NEXTAUTH_URL }}
        DB_HOST: ${{ secrets.PROD_DB_HOST }}
        DB_PORT: ${{ secrets.PROD_DB_PORT }}
        DB_NAME: ${{ secrets.PROD_DB_NAME }}
        DB_USER: ${{ secrets.PROD_DB_USER }}
        DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

    # Add your production deployment steps here
    # This could be deploying to Vercel, AWS, or your preferred hosting platform